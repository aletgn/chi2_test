import numpy as np
from scipy.stats import chi2

def chi2test(new_counts: np.ndarray, new_bins: np.ndarray, rand_var: callable,
             signif: float = 5, est_params: bool = True) -> None:
    """
    This function computes the experimental and theoretical value of chi2. See
    README.md for further mathematical details.

    Parameters
    ----------
    new_counts : np.ndarray
        Relative frequencies of the merged histogram.
    new_bins : np.ndarray
        Bins of the merged histogram.
    rand_var : rv_continuous
        Distribution to be tested generated by build_rv.
    signif : float, optional
        Significativity level of the chi2 test. The default is 5.
    est_params : bool, optional
        Have you estimated the parameters of the distribution from the given data?
        If so, then True. The function computes how many can be estimated and
        adjusts the degrees of freedom automatically.

    Returns
    -------
    None
    """
    
    # chi^2 from data -- compute theoretical frequencies for all bins
    th = new_counts.sum()*np.array([rand_var.cdf(k[1]) - rand_var.cdf(k[0]) for k in new_bins])
    data_chi_2 = (((new_counts - th)**2)/th).sum()
    
    # specify wheter the parameters were estimated from the data
    if est_params:
        # get the number of parameters that can be estimated
        n_est_params = len(rand_var.kwds.keys())
    else:
        n_est_params = 0

    # chi^2 from theory
    # est_params parameters were estimated so dofs has to be decreased by est_params
    dof = new_bins.shape[0] - 1 - n_est_params
    confidence = (100-signif)/100
    fun_chi_2 = chi2.ppf([confidence], dof)[0]
    
    print('************************************************************')
    print(f"Number of samples: {new_counts.sum():,.0f}")
    print(f"Number of bins: {len(new_bins):,.0f}")
    print(f"Number of Degrees of Freedom (DoFs): {dof:,.0f}")
    print(f"Number of Estimated Parameters: {n_est_params:,.0f}")
    print(f"Chi2 from data = {data_chi_2:.2f}")
    print(f"Chi2 from function = {fun_chi_2:.2f}")
    # chi2 test
    if data_chi_2 < fun_chi_2:
        print("Chi2 test passed (data < function)")
    else:
        print("Chi2 test failed (data >= function)")
    print('************************************************************')